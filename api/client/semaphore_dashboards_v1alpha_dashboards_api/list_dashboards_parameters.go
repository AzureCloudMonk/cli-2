// Code generated by go-swagger; DO NOT EDIT.

package semaphore_dashboards_v1alpha_dashboards_api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewListDashboardsParams creates a new ListDashboardsParams object
// with the default values initialized.
func NewListDashboardsParams() *ListDashboardsParams {
	var ()
	return &ListDashboardsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewListDashboardsParamsWithTimeout creates a new ListDashboardsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewListDashboardsParamsWithTimeout(timeout time.Duration) *ListDashboardsParams {
	var ()
	return &ListDashboardsParams{

		timeout: timeout,
	}
}

// NewListDashboardsParamsWithContext creates a new ListDashboardsParams object
// with the default values initialized, and the ability to set a context for a request
func NewListDashboardsParamsWithContext(ctx context.Context) *ListDashboardsParams {
	var ()
	return &ListDashboardsParams{

		Context: ctx,
	}
}

// NewListDashboardsParamsWithHTTPClient creates a new ListDashboardsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewListDashboardsParamsWithHTTPClient(client *http.Client) *ListDashboardsParams {
	var ()
	return &ListDashboardsParams{
		HTTPClient: client,
	}
}

/*ListDashboardsParams contains all the parameters to send to the API endpoint
for the list dashboards operation typically these are written to a http.Request
*/
type ListDashboardsParams struct {

	/*PageSize*/
	PageSize *int32
	/*PageToken*/
	PageToken *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the list dashboards params
func (o *ListDashboardsParams) WithTimeout(timeout time.Duration) *ListDashboardsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list dashboards params
func (o *ListDashboardsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list dashboards params
func (o *ListDashboardsParams) WithContext(ctx context.Context) *ListDashboardsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list dashboards params
func (o *ListDashboardsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list dashboards params
func (o *ListDashboardsParams) WithHTTPClient(client *http.Client) *ListDashboardsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list dashboards params
func (o *ListDashboardsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithPageSize adds the pageSize to the list dashboards params
func (o *ListDashboardsParams) WithPageSize(pageSize *int32) *ListDashboardsParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the list dashboards params
func (o *ListDashboardsParams) SetPageSize(pageSize *int32) {
	o.PageSize = pageSize
}

// WithPageToken adds the pageToken to the list dashboards params
func (o *ListDashboardsParams) WithPageToken(pageToken *string) *ListDashboardsParams {
	o.SetPageToken(pageToken)
	return o
}

// SetPageToken adds the pageToken to the list dashboards params
func (o *ListDashboardsParams) SetPageToken(pageToken *string) {
	o.PageToken = pageToken
}

// WriteToRequest writes these params to a swagger request
func (o *ListDashboardsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.PageSize != nil {

		// query param page_size
		var qrPageSize int32
		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt32(qrPageSize)
		if qPageSize != "" {
			if err := r.SetQueryParam("page_size", qPageSize); err != nil {
				return err
			}
		}

	}

	if o.PageToken != nil {

		// query param page_token
		var qrPageToken string
		if o.PageToken != nil {
			qrPageToken = *o.PageToken
		}
		qPageToken := qrPageToken
		if qPageToken != "" {
			if err := r.SetQueryParam("page_token", qPageToken); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
